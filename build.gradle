buildscript {
    ext['dependencyPluginVersion'] = '0.6.0.RELEASE'
    ext['springCloudVersion'] = 'Brixton.RELEASE'
    ext['springBootVersion'] = '2.0.5.RELEASE'
    ext['springVersion'] = '4.2.5.RELEASE'
    ext['gradleDockerVersion'] = '1.2'
    ext['junitVersion'] = '4.12'
    ext['junitJupiterVersion'] = '5.3.1'
    ext['embedMongoVersion'] = '1.50.0'
    ext['restAssuredVersion'] = '2.9.0'
    ext['guavaVersion'] = '18.0'
    ext['commonsLangVersion'] = '3.4'
    ext['slf4jVersion'] = '1.7.12'
    ext['logbackVersion'] = '1.2.3'
    ext['lombokVersion'] = '1.18.4'//'1.16.20'
    ext['modelMapperVersion'] = '1.1.0'
    ext['owaspVersion'] = '2.1.0.1'
    ext['vavrVersion'] = '0.9.0'
    ext['reactorVersion'] = '3.2.6.RELEASE'
    ext['reactorKafkaVersion'] = '1.1.0.RELEASE'
    ext['micrometerVersion'] = '1.0.4'
    ext['confluentVersion'] = '5.0.0'
    ext['commonsIoVersion'] = '1.3.2'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
//        maven {
//            url 'https://projectlombok.org/edge-releases'
//        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyPluginVersion}"
        classpath "se.transmode.gradle:gradle-docker:${gradleDockerVersion}"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.1.0'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.16.0"
        classpath "io.franzbecker:gradle-lombok:2.2"
//        classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
//        classpath "io.freefair.gradle:lombok-plugin:3.2.0"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.13"
    }
}

//group = 'kafka-reactive-sample'
// Define the main class for the application
//mainClassName = 'App'

group = 'kafka-reactive-sample'
version =  '1.0'

//apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: "com.commercehub.gradle.plugin.avro"
//apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: 'net.ltgt.apt'

configurations {
    apt
}

jar {
    group = 'kafka-reactive-sample2'
    baseName = 'kafka-reactor'
    version =  '1.0'
    manifest {
        attributes 'Main-Class': 'com.ing.kafka.reactor.Application'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://packages.confluent.io/maven/" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

//sourceSets.main.java.srcDir new File(buildDir, 'generated/java')

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'build/generated-main-avro-java'
        }
    }
}


//idea {
//    module {
//        // Marks the already(!) added srcDir as "generated"
//        generatedSourceDirs += file('build/generated/java')
//    }
//}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude module : 'spring-boot-starter-logging'
//    all*.exclude group: 'ch.qos.logback', module: 'logback-core'
    all*.exclude group: 'log4j', module: 'log4j'

}

dependencyManagement {
    imports {
//        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.projectreactor:reactor-bom:Aluminium-RELEASE"
    }
}



dependencies {
    // spring boot
    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-cache'

    // spring devtools
    runtimeClasspath "org.springframework.boot:spring-boot-devtools"

//    // Avro
    compile "org.apache.avro:avro:1.8.2"

    //Reactive
    compile "io.projectreactor:reactor-core:$reactorVersion"
    compile "io.projectreactor.kafka:reactor-kafka:$reactorKafkaVersion"

    //org.apache.kafka:kafka-clients:2.0.0
    compile "org.apache.kafka:kafka-clients:2.0.0"
//    compile ("org.apache.kafka:kafka-streams:$kafkaVersion", optional)


    // Kafka
    compile "org.springframework.kafka:spring-kafka"
//    compile "org.springframework.kafka:spring-kafka:2.1.7.RELEASE"

    // guava
    compile "com.google.guava:guava:${guavaVersion}"

    // vavr
    compile "io.vavr:vavr:${vavrVersion}"

    // logging
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"

    // apache commons lang
    compile "org.apache.commons:commons-lang3:${commonsLangVersion}"

    // apache common io
    compile "org.apache.commons:commons-io:${commonsIoVersion}"

    // jackson datatype
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    // fasterxml jackson
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-avro"

    // lombok
//    compileOnly "org.projectlombok:lombok:${lombokVersion}"
//    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
//    implementation "org.projectlombok:lombok:${lombokVersion}"

    apt "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
//    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    // model mapper
    compile "org.modelmapper:modelmapper:${modelMapperVersion}"

    // metrics
    compile "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"


//    <dependency>
//    <groupId>org.mapstruct</groupId>
//            <artifactId>mapstruct-jdk8</artifactId>
//    <version>${mapstrcut.version}</version>
//        </dependency>
//
//    <dependency>
//    <groupId>org.mapstruct</groupId>
//            <artifactId>mapstruct-processor</artifactId>
//    <version>${mapstrcut.version}</version>
//        </dependency>


//    <dependency>
//    <groupId>io.confluent</groupId>
//    <artifactId>kafka-avro-serializer</artifactId>
//    <version>5.2.1</version>
//    </dependency>

    // kafka avro serializer
    compile "io.confluent:kafka-avro-serializer:${confluentVersion}"


//    <!-- https://mvnrepository.com/artifact/kafka-avro-confluent/kafka-avro-confluent -->
//    <dependency>
//    <groupId>kafka-avro-confluent</groupId>
//    <artifactId>kafka-avro-confluent</artifactId>
//    <version>0.1.0</version>
//</dependency>
//
//    <dependency>
//    <groupId>org.springframework.kafka</groupId>
//      <artifactId>spring-kafka-test</artifactId>
//    <version>${spring-kafka.version}</version>
//      <scope>test</scope>
//    </dependency>




    // unit testing
    testCompile "io.projectreactor:reactor-test:$reactorVersion"
    testCompile "org.springframework.kafka:spring-kafka-test"

    testCompile 'org.slf4j:jcl-over-slf4j:1.7.12'
    testCompile "org.springframework.boot:spring-boot-starter-test"

    testCompile "org.junit.jupiter:junit-jupiter-api"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testRuntime "org.junit.vintage:junit-vintage-engine"

    testCompile "org.spockframework:spock-spring:1.1-groovy-2.4"//:1.0-groovy-2.4"
    testCompile "io.projectreactor:reactor-test"


}

bootRun {
//    addResources = true
    sourceResources sourceSets.main

}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10'
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    def waitForScript = file('src/main/docker/wait-for-it.sh')
    doFirst {
        copy {
            from jar
            into stageDir
        }
        copy {
            from waitForScript
            into stageDir
        }
    }
}

task initTest(type: NpmTask) {
    args = ['run', 'init-test']

}

// javascript unit testing
task testUnit(type: NpmTask) {
    args = ['run', 'test-unit']
}

////include js unit tests into project build lifecycle
//test.dependsOn testUnit




task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask, dependsOn: ['makePretty']) {
    source("src/main/avro")
    outputDir = file("build/generated/java")
}

//task fixPluginAvro (type: Delete, dependsOn:'copyTask') {cfiklmrs
//    delete 'dest'
//}
//
//task copyTask (type: Copy, dependsOn:'generateAvro') {
//    from 'dest/java'
//    into 'src/main/java'
//}

task makePretty(type: Delete) {
//    delete 'dest'
    delete 'build/generated/java'
}



project.afterEvaluate {
    build.dependsOn generateAvro
//    compileJava.dependsOn generateAvro
}



tasks.withType(JavaCompile) {
//    options.annotationProcessorPath = configurations.apt
//    options.compilerArgs = ['-Amapstruct.suppressGeneratorTimestamp=true', '-Amapstruct.defaultComponentModel=spring']
}
