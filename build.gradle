
buildscript {
    ext['dependencyPluginVersion'] = '0.6.0.RELEASE'
    ext['springCloudVersion'] = 'Brixton.RELEASE'
    ext['springBootVersion'] = '2.0.5.RELEASE'
    ext['springVersion'] = '4.2.5.RELEASE'
    ext['gradleDockerVersion'] = '1.2'
    ext['junitVersion'] = '4.12'
    ext['junitJupiterVersion'] = '5.3.1'
    ext['embedMongoVersion'] = '1.50.0'
    ext['restAssuredVersion'] = '2.9.0'
    ext['guavaVersion'] = '18.0'
    ext['commonsLangVersion'] = '3.4'
    ext['slf4jVersion'] = '1.7.12'
    ext['logbackVersion'] = '1.2.3'
    ext['lombokVersion'] = '1.16.20'
    ext['modelMapperVersion'] = '1.1.0'
    ext['owaspVersion'] = '2.1.0.1'
    ext['vavrVersion'] = '0.9.0'
    ext['reactorVersion'] = '3.0.7.RELEASE'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyPluginVersion}"
        classpath "se.transmode.gradle:gradle-docker:${gradleDockerVersion}"
        classpath "org.owasp.esapi:esapi:${owaspVersion}"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.1.0'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }

}

group = 'kafka-reactive-sample'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'

jar {
    group = 'imc-test'
    baseName = 'rock-paper-scissors'
    version =  '1.0'
    manifest {
        attributes 'Main-Class': 'com.imc.rps.Application'
    }
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude module : 'spring-boot-starter-logging'
//    all*.exclude group: 'ch.qos.logback', module: 'logback-core'
    all*.exclude group: 'log4j', module: 'log4j'

}

dependencyManagement {
    imports {
//        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.projectreactor:reactor-bom:Aluminium-RELEASE"
    }
}


dependencies {
    // spring boot
    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-cache'

    // Reactor
    compile "io.projectreactor:reactor-core:$reactorVersion"

    // Kafka
    compile "org.springframework.kafka:spring-kafka"
//    compile "org.springframework.kafka:spring-kafka:2.1.7.RELEASE"

    // springfox/swagger
//    compile "io.springfox:springfox-swagger2"
//    compile "io.springfox:springfox-swagger-ui"
//    testCompile "io.github.robwin:swagger2markup:0.9.2"

    // guava
    compile "com.google.guava:guava:${guavaVersion}"

    // vavr
    compile "io.vavr:vavr:${vavrVersion}"

    // logging
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"

    // apache commons lang
    compile "org.apache.commons:commons-lang3:${commonsLangVersion}"


    // jackson datatype
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    // model mapper
    compile "org.modelmapper:modelmapper:${modelMapperVersion}"

    // unit testing
    testCompile 'org.slf4j:jcl-over-slf4j:1.7.12'
    testCompile "org.springframework.boot:spring-boot-starter-test"

    testCompile "org.junit.jupiter:junit-jupiter-api"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testRuntime "org.junit.vintage:junit-vintage-engine"

    testCompile "org.spockframework:spock-spring:1.1-groovy-2.4"//:1.0-groovy-2.4"
    testCompile "io.projectreactor:reactor-test"


}

bootRun {
//    addResources = true
    sourceResources sourceSets.main
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10'
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    def waitForScript = file('src/main/docker/wait-for-it.sh')
    doFirst {
        copy {
            from jar
            into stageDir
        }
        copy {
            from waitForScript
            into stageDir
        }
    }
}

task initTest(type: NpmTask) {
    args = ['run', 'init-test']

}

// javascript unit testing
task testUnit(type: NpmTask) {
    args = ['run', 'test-unit']

}

////include js unit tests into project build lifecycle
//test.dependsOn testUnit
