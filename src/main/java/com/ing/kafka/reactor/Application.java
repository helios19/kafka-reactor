package com.ing.kafka.reactor;

import com.ing.kafka.reactor.service.TransactionService;
import lombok.extern.slf4j.Slf4j;
import mysqlcdc.test.RawTransaction.Envelope;
import org.modelmapper.ModelMapper;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.kafka.annotation.EnableKafka;
import reactor.core.publisher.Flux;
import reactor.kafka.receiver.KafkaReceiver;
import reactor.kafka.receiver.ReceiverRecord;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
@Slf4j
@EnableKafka
//@EnableKafkaStreams
@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    private volatile String lsn = null;

    /**
     * Listen to Kafka topic.
     *
     * @param kafkaReceiver Kafka Reactor receiver
     * @return CommandLineRunner
     */
    @Bean
    ApplicationRunner runner(KafkaReceiver<String, Envelope> kafkaReceiver, TransactionService transactionService) {


        return applicationArguments -> {

            String lsn = null;

            log.info("---------------------");
            log.info("runner method");
            log.info("---------------------");

            try {
                Flux<ReceiverRecord<String,Envelope>> kafkaFlux = kafkaReceiver.receive();

//                kafkaFlux
//                        .log()
//                        .doOnNext(o -> {
//                            log.info("o : " + o.getClass().getName());
//                            log.info("o.value : " + o.value());
//                        })
//                        .bufferUntil(receiverRecord -> receiverRecord.value().getAfter().getId() > 10)
//                        .doOnError(throwable -> log.error("throwable : " + throwable.getMessage(), throwable))
//                        .subscribe();



                kafkaFlux
                .log()
                .map(receiverRecord -> new ModelMapper().map(receiverRecord.value(), Envelope.class))
                .bufferUntil(r -> {

                    if (getLsn() == null) {
                        setLsn(r.getAfter().getName());
                    }

                    System.out.println("----------------------");
                    System.out.println("getLsn() : " + getLsn());
                    System.out.println("r.getAfter().getName() : " + r.getAfter().getName());
                    System.out.println("r.getAfter().getId()() : " + r.getAfter().getId());
                    System.out.println("----------------------");


                    if (!getLsn().equalsIgnoreCase(r.getAfter().getName())) {
                        setLsn(r.getAfter().getName());
                        return true;
                    }

                    return false;

                    //return r.getAfter().getId() % 10 == 0;

                }, true)
//                .map(r -> ((FluxOperator) r).toIterable())
                .doOnNext(records -> {
                        System.out.println("record : " + records);
                        transactionService.process(records);
                    }
                )
                .log()
                .doOnError(e -> System.err.println(e))
                .subscribe(System.out::println);




//            receiver.subscribeWith(EmitterProcessor.create(false));



//            kafkaFlux.log().toIterable().forEach(receiverRecord -> System.out.println("receiverRecord.value :" + receiverRecord.value().getAfter().getName()));
            } catch (Exception e) {
                log.info("===========================");
                log.error("exception : ", e);
                log.info("===========================");
            }



//        kafkaFlux
//                .doOnSubscribe(s -> log.info("doOnSubscribe to display envelope : " + s.toString()))
//                .doOnNext(record -> {
//                    try {
//
//                        record.receiverOffset().commit()
//                                .doOnError(e -> log.error("error", e))
//                                .doOnSuccess(i -> transactionService.process(record.value()))
////                                .retry(retryPredicate)
//                                .subscribe();
//                    } catch (Exception e) {
//                        log.error("Unexpected exception", e);
//                    }
//                })
//                .doOnError(e -> log.error("KafkaFlux exception", e));





//        kafkaFlux
////                .log()
//                .doOnNext(r -> r.receiverOffset().acknowledge())
//                .map(ReceiverRecord::value)
////                .log()
//                .doOnNext(subscription -> transactionService.process((Envelope) subscription))
////                {
////                    System.out.println("record : " + (Envelope) subscription);
////                    transactionService.process((Envelope) subscription);
////                })
//                .doOnError(e -> System.err.println(e))
//                .subscribe();








//                .doOnNext(envelope -> log.info("subscription record : " + envelope.getAfter().getName()));

//                .doOnSubscribe(subscription -> System.out.println("subscription record : " + ((Envelope) subscription).getAfter().getName()))
//                .subscribe();
//                .bufferUntil(envelope -> envelope.getBefore().getName() != null);


//        kafkaReceiver.receive()
//                .log()
//                .bufferUntil(o -> {
//                    System.out.println("Records in while buffering : " + o.toString());
//                    return true;
//
//                })
//                .map(r -> ((FluxOperator) r).toIterable())
//                .doOnSubscribe(records ->
//                        System.out.println("record : " + (MapSubscriber) records))
////                        transactionService.process((List<ConsumerRecord<String, Envelope>>) records))
//                .log()
//                .doOnError(e -> System.err.println(e))
//                .subscribe(System.out::println);


//        kafkaDataReceiver.receive()
//                .map { it.value() }
//        .share()
//                .log()


//        receiver.receive()
//                .doOnNext(r -> {
//                    process(r);
//                    r.receiverOffset().commit().block();
//                });





        };





    }

    public void setLsn(String lsn) {
        this.lsn = lsn;
    }

    protected String getLsn() {
        return this.lsn;
    }


}
